State 167 conflicts: 1 shift/reduce


Grammar

    0 $accept: programstruct $end

    1 programstruct: program_head ';' program_body '.'

    2 program_head: PROGRAM ID '(' idlist ')'
    3             | PROGRAM ID

    4 program_body: const_declarations var_declarations subprogram_declarations compound_statement

    5 idlist: idlist ',' ID
    6       | ID
    7       | error

    8 const_declarations: CONST const_declaration ';'
    9                   | %empty

   10 const_declaration: const_declaration ';' ID '=' const_value
   11                  | ID '=' const_value

   12 const_value: PLUS NUM
   13            | UMINUS NUM
   14            | NUM
   15            | QUOTE LETTER QUOTE

   16 var_declarations: VAR var_declaration ';'
   17                 | %empty

   18 var_declaration: var_declaration ';' ID L
   19                | ID L

   20 L: ':' type
   21  | ',' ID L

   22 type: basic_type
   23     | ARRAY '[' period ']' OF basic_type

   24 basic_type: INTEGER
   25           | REAL
   26           | BOOLEAN
   27           | CHAR
   28           | error

   29 period: period ',' DIGITSDOTDOTDIGITS
   30       | DIGITSDOTDOTDIGITS

   31 subprogram_declarations: subprogram_declarations subprogram ';'
   32                        | %empty

   33 subprogram: subprogram_head ';' subprogram_body

   34 subprogram_head: PROCEDURE ID formal_parameter
   35                | FUNCTION ID formal_parameter ':' basic_type

   36 formal_parameter: '(' parameter_list ')'
   37                 | %empty

   38 parameter_list: parameter_list ';' parameter
   39               | parameter

   40 parameter: var_parameter
   41          | value_parameter

   42 var_parameter: VAR value_parameter

   43 value_parameter: idlist ':' basic_type

   44 $@1: %empty

   45 subprogram_body: const_declarations var_declarations $@1 compound_statement

   46 compound_statement: _BEGIN statement_list END

   47 $@2: %empty

   48 statement_list: statement_list ';' $@2 statement
   49               | statement

   50 $@3: %empty

   51 statement: variable ASSIGNOP expression $@3
   52          | procedure_call

   53 $@4: %empty

   54 statement: $@4 compound_statement

   55 $@5: %empty

   56 $@6: %empty

   57 statement: IF expression THEN $@5 statement $@6 else_part

   58 $@7: %empty

   59 statement: FOR ID ASSIGNOP expression TO expression DO $@7 statement
   60          | READ '(' variable_list ')'
   61          | WRITE '(' expression_list ')'
   62          | %empty

   63 variable_list: variable_list ',' variable
   64              | variable

   65 variable: ID id_varpart

   66 id_varpart: '[' expression_list ']'
   67           | %empty

   68 procedure_call: ID
   69               | ID '(' expression_list ')'

   70 $@8: %empty

   71 else_part: ELSE $@8 statement
   72          | %empty

   73 expression_list: expression_list ',' expression
   74                | expression

   75 expression: simple_expression RELOP simple_expression
   76           | simple_expression

   77 simple_expression: simple_expression ADDOP term
   78                  | simple_expression PLUS term
   79                  | simple_expression UMINUS term
   80                  | term

   81 term: term MULOP factor
   82     | factor

   83 factor: NUM
   84       | variable
   85       | ID '(' expression_list ')'
   86       | '(' expression_list ')'
   87       | NOT factor
   88       | UMINUS factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 36 60 61 69 85 86
')' (41) 2 36 60 61 69 85 86
',' (44) 5 21 29 63 73
'.' (46) 1
':' (58) 20 35 43
';' (59) 1 8 10 16 18 31 33 38 48
'=' (61) 10 11
'[' (91) 23 66
']' (93) 23 66
error (256) 7 28
PLUS (258) 12 78
ADDOP (259) 77
MULOP (260) 81
PROGRAM (261) 2 3
CONST (262) 8
QUOTE (263) 15
VAR (264) 16 42
PROCEDURE (265) 34
FUNCTION (266) 35
_BEGIN (267) 46
END (268) 46
ASSIGNOP (269) 51 59
IF (270) 57
THEN (271) 57
ELSE (272) 71
FOR (273) 59
TO (274) 59
DO (275) 59
NOT (276) 87
RELOP (277) 75
READ (278) 60
WRITE (279) 61
ARRAY (280) 23
OF (281) 23
ID (282) 2 3 5 6 10 11 18 19 21 34 35 59 65 68 69 85
UMINUS (283) 13 79 88
DIGITSDOTDOTDIGITS (284) 29 30
INTEGER (285) 24
REAL (286) 25
BOOLEAN (287) 26
CHAR (288) 27
NUM (289) 12 13 14 83
LETTER (290) 15


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
programstruct (46)
    on left: 1, on right: 0
program_head (47)
    on left: 2 3, on right: 1
program_body (48)
    on left: 4, on right: 1
idlist (49)
    on left: 5 6 7, on right: 2 5 43
const_declarations (50)
    on left: 8 9, on right: 4 45
const_declaration (51)
    on left: 10 11, on right: 8 10
const_value (52)
    on left: 12 13 14 15, on right: 10 11
var_declarations (53)
    on left: 16 17, on right: 4 45
var_declaration (54)
    on left: 18 19, on right: 16 18
L (55)
    on left: 20 21, on right: 18 19 21
type (56)
    on left: 22 23, on right: 20
basic_type (57)
    on left: 24 25 26 27 28, on right: 22 23 35 43
period (58)
    on left: 29 30, on right: 23 29
subprogram_declarations (59)
    on left: 31 32, on right: 4 31
subprogram (60)
    on left: 33, on right: 31
subprogram_head (61)
    on left: 34 35, on right: 33
formal_parameter (62)
    on left: 36 37, on right: 34 35
parameter_list (63)
    on left: 38 39, on right: 36 38
parameter (64)
    on left: 40 41, on right: 38 39
var_parameter (65)
    on left: 42, on right: 40
value_parameter (66)
    on left: 43, on right: 41 42
subprogram_body (67)
    on left: 45, on right: 33
$@1 (68)
    on left: 44, on right: 45
compound_statement (69)
    on left: 46, on right: 4 45 54
statement_list (70)
    on left: 48 49, on right: 46 48
$@2 (71)
    on left: 47, on right: 48
statement (72)
    on left: 51 52 54 57 59 60 61 62, on right: 48 49 57 59 71
$@3 (73)
    on left: 50, on right: 51
$@4 (74)
    on left: 53, on right: 54
$@5 (75)
    on left: 55, on right: 57
$@6 (76)
    on left: 56, on right: 57
$@7 (77)
    on left: 58, on right: 59
variable_list (78)
    on left: 63 64, on right: 60 63
variable (79)
    on left: 65, on right: 51 63 64 84
id_varpart (80)
    on left: 66 67, on right: 65
procedure_call (81)
    on left: 68 69, on right: 52
else_part (82)
    on left: 71 72, on right: 57
$@8 (83)
    on left: 70, on right: 71
expression_list (84)
    on left: 73 74, on right: 61 66 69 73 85 86
expression (85)
    on left: 75 76, on right: 51 57 59 73 74
simple_expression (86)
    on left: 77 78 79 80, on right: 75 76 77 78 79
term (87)
    on left: 81 82, on right: 77 78 79 80 81
factor (88)
    on left: 83 84 85 86 87 88, on right: 81 82 87 88


State 0

    0 $accept: . programstruct $end

    PROGRAM  shift, and go to state 1

    programstruct  go to state 2
    program_head   go to state 3


State 1

    2 program_head: PROGRAM . ID '(' idlist ')'
    3             | PROGRAM . ID

    ID  shift, and go to state 4


State 2

    0 $accept: programstruct . $end

    $end  shift, and go to state 5


State 3

    1 programstruct: program_head . ';' program_body '.'

    ';'  shift, and go to state 6


State 4

    2 program_head: PROGRAM ID . '(' idlist ')'
    3             | PROGRAM ID .  [';']

    '('  shift, and go to state 7

    $default  reduce using rule 3 (program_head)


State 5

    0 $accept: programstruct $end .

    $default  accept


State 6

    1 programstruct: program_head ';' . program_body '.'

    CONST  shift, and go to state 8

    $default  reduce using rule 9 (const_declarations)

    program_body        go to state 9
    const_declarations  go to state 10


State 7

    2 program_head: PROGRAM ID '(' . idlist ')'

    error  shift, and go to state 11
    ID     shift, and go to state 12

    idlist  go to state 13


State 8

    8 const_declarations: CONST . const_declaration ';'

    ID  shift, and go to state 14

    const_declaration  go to state 15


State 9

    1 programstruct: program_head ';' program_body . '.'

    '.'  shift, and go to state 16


State 10

    4 program_body: const_declarations . var_declarations subprogram_declarations compound_statement

    VAR  shift, and go to state 17

    $default  reduce using rule 17 (var_declarations)

    var_declarations  go to state 18


State 11

    7 idlist: error .

    $default  reduce using rule 7 (idlist)


State 12

    6 idlist: ID .

    $default  reduce using rule 6 (idlist)


State 13

    2 program_head: PROGRAM ID '(' idlist . ')'
    5 idlist: idlist . ',' ID

    ')'  shift, and go to state 19
    ','  shift, and go to state 20


State 14

   11 const_declaration: ID . '=' const_value

    '='  shift, and go to state 21


State 15

    8 const_declarations: CONST const_declaration . ';'
   10 const_declaration: const_declaration . ';' ID '=' const_value

    ';'  shift, and go to state 22


State 16

    1 programstruct: program_head ';' program_body '.' .

    $default  reduce using rule 1 (programstruct)


State 17

   16 var_declarations: VAR . var_declaration ';'

    ID  shift, and go to state 23

    var_declaration  go to state 24


State 18

    4 program_body: const_declarations var_declarations . subprogram_declarations compound_statement

    $default  reduce using rule 32 (subprogram_declarations)

    subprogram_declarations  go to state 25


State 19

    2 program_head: PROGRAM ID '(' idlist ')' .

    $default  reduce using rule 2 (program_head)


State 20

    5 idlist: idlist ',' . ID

    ID  shift, and go to state 26


State 21

   11 const_declaration: ID '=' . const_value

    PLUS    shift, and go to state 27
    QUOTE   shift, and go to state 28
    UMINUS  shift, and go to state 29
    NUM     shift, and go to state 30

    const_value  go to state 31


State 22

    8 const_declarations: CONST const_declaration ';' .  [VAR, PROCEDURE, FUNCTION, _BEGIN]
   10 const_declaration: const_declaration ';' . ID '=' const_value

    ID  shift, and go to state 32

    $default  reduce using rule 8 (const_declarations)


State 23

   19 var_declaration: ID . L

    ','  shift, and go to state 33
    ':'  shift, and go to state 34

    L  go to state 35


State 24

   16 var_declarations: VAR var_declaration . ';'
   18 var_declaration: var_declaration . ';' ID L

    ';'  shift, and go to state 36


State 25

    4 program_body: const_declarations var_declarations subprogram_declarations . compound_statement
   31 subprogram_declarations: subprogram_declarations . subprogram ';'

    PROCEDURE  shift, and go to state 37
    FUNCTION   shift, and go to state 38
    _BEGIN     shift, and go to state 39

    subprogram          go to state 40
    subprogram_head     go to state 41
    compound_statement  go to state 42


State 26

    5 idlist: idlist ',' ID .

    $default  reduce using rule 5 (idlist)


State 27

   12 const_value: PLUS . NUM

    NUM  shift, and go to state 43


State 28

   15 const_value: QUOTE . LETTER QUOTE

    LETTER  shift, and go to state 44


State 29

   13 const_value: UMINUS . NUM

    NUM  shift, and go to state 45


State 30

   14 const_value: NUM .

    $default  reduce using rule 14 (const_value)


State 31

   11 const_declaration: ID '=' const_value .

    $default  reduce using rule 11 (const_declaration)


State 32

   10 const_declaration: const_declaration ';' ID . '=' const_value

    '='  shift, and go to state 46


State 33

   21 L: ',' . ID L

    ID  shift, and go to state 47


State 34

   20 L: ':' . type

    error    shift, and go to state 48
    ARRAY    shift, and go to state 49
    INTEGER  shift, and go to state 50
    REAL     shift, and go to state 51
    BOOLEAN  shift, and go to state 52
    CHAR     shift, and go to state 53

    type        go to state 54
    basic_type  go to state 55


State 35

   19 var_declaration: ID L .

    $default  reduce using rule 19 (var_declaration)


State 36

   16 var_declarations: VAR var_declaration ';' .  [PROCEDURE, FUNCTION, _BEGIN]
   18 var_declaration: var_declaration ';' . ID L

    ID  shift, and go to state 56

    $default  reduce using rule 16 (var_declarations)


State 37

   34 subprogram_head: PROCEDURE . ID formal_parameter

    ID  shift, and go to state 57


State 38

   35 subprogram_head: FUNCTION . ID formal_parameter ':' basic_type

    ID  shift, and go to state 58


State 39

   46 compound_statement: _BEGIN . statement_list END

    IF     shift, and go to state 59
    FOR    shift, and go to state 60
    READ   shift, and go to state 61
    WRITE  shift, and go to state 62
    ID     shift, and go to state 63

    _BEGIN    reduce using rule 53 ($@4)
    $default  reduce using rule 62 (statement)

    statement_list  go to state 64
    statement       go to state 65
    $@4             go to state 66
    variable        go to state 67
    procedure_call  go to state 68


State 40

   31 subprogram_declarations: subprogram_declarations subprogram . ';'

    ';'  shift, and go to state 69


State 41

   33 subprogram: subprogram_head . ';' subprogram_body

    ';'  shift, and go to state 70


State 42

    4 program_body: const_declarations var_declarations subprogram_declarations compound_statement .

    $default  reduce using rule 4 (program_body)


State 43

   12 const_value: PLUS NUM .

    $default  reduce using rule 12 (const_value)


State 44

   15 const_value: QUOTE LETTER . QUOTE

    QUOTE  shift, and go to state 71


State 45

   13 const_value: UMINUS NUM .

    $default  reduce using rule 13 (const_value)


State 46

   10 const_declaration: const_declaration ';' ID '=' . const_value

    PLUS    shift, and go to state 27
    QUOTE   shift, and go to state 28
    UMINUS  shift, and go to state 29
    NUM     shift, and go to state 30

    const_value  go to state 72


State 47

   21 L: ',' ID . L

    ','  shift, and go to state 33
    ':'  shift, and go to state 34

    L  go to state 73


State 48

   28 basic_type: error .

    $default  reduce using rule 28 (basic_type)


State 49

   23 type: ARRAY . '[' period ']' OF basic_type

    '['  shift, and go to state 74


State 50

   24 basic_type: INTEGER .

    $default  reduce using rule 24 (basic_type)


State 51

   25 basic_type: REAL .

    $default  reduce using rule 25 (basic_type)


State 52

   26 basic_type: BOOLEAN .

    $default  reduce using rule 26 (basic_type)


State 53

   27 basic_type: CHAR .

    $default  reduce using rule 27 (basic_type)


State 54

   20 L: ':' type .

    $default  reduce using rule 20 (L)


State 55

   22 type: basic_type .

    $default  reduce using rule 22 (type)


State 56

   18 var_declaration: var_declaration ';' ID . L

    ','  shift, and go to state 33
    ':'  shift, and go to state 34

    L  go to state 75


State 57

   34 subprogram_head: PROCEDURE ID . formal_parameter

    '('  shift, and go to state 76

    $default  reduce using rule 37 (formal_parameter)

    formal_parameter  go to state 77


State 58

   35 subprogram_head: FUNCTION ID . formal_parameter ':' basic_type

    '('  shift, and go to state 76

    $default  reduce using rule 37 (formal_parameter)

    formal_parameter  go to state 78


State 59

   57 statement: IF . expression THEN $@5 statement $@6 else_part

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression         go to state 85
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 60

   59 statement: FOR . ID ASSIGNOP expression TO expression DO $@7 statement

    ID  shift, and go to state 89


State 61

   60 statement: READ . '(' variable_list ')'

    '('  shift, and go to state 90


State 62

   61 statement: WRITE . '(' expression_list ')'

    '('  shift, and go to state 91


State 63

   65 variable: ID . id_varpart
   68 procedure_call: ID .  [END, ELSE, ';']
   69               | ID . '(' expression_list ')'

    '('  shift, and go to state 92
    '['  shift, and go to state 93

    ASSIGNOP  reduce using rule 67 (id_varpart)
    $default  reduce using rule 68 (procedure_call)

    id_varpart  go to state 94


State 64

   46 compound_statement: _BEGIN statement_list . END
   48 statement_list: statement_list . ';' $@2 statement

    END  shift, and go to state 95
    ';'  shift, and go to state 96


State 65

   49 statement_list: statement .

    $default  reduce using rule 49 (statement_list)


State 66

   54 statement: $@4 . compound_statement

    _BEGIN  shift, and go to state 39

    compound_statement  go to state 97


State 67

   51 statement: variable . ASSIGNOP expression $@3

    ASSIGNOP  shift, and go to state 98


State 68

   52 statement: procedure_call .

    $default  reduce using rule 52 (statement)


State 69

   31 subprogram_declarations: subprogram_declarations subprogram ';' .

    $default  reduce using rule 31 (subprogram_declarations)


State 70

   33 subprogram: subprogram_head ';' . subprogram_body

    CONST  shift, and go to state 8

    $default  reduce using rule 9 (const_declarations)

    const_declarations  go to state 99
    subprogram_body     go to state 100


State 71

   15 const_value: QUOTE LETTER QUOTE .

    $default  reduce using rule 15 (const_value)


State 72

   10 const_declaration: const_declaration ';' ID '=' const_value .

    $default  reduce using rule 10 (const_declaration)


State 73

   21 L: ',' ID L .

    $default  reduce using rule 21 (L)


State 74

   23 type: ARRAY '[' . period ']' OF basic_type

    DIGITSDOTDOTDIGITS  shift, and go to state 101

    period  go to state 102


State 75

   18 var_declaration: var_declaration ';' ID L .

    $default  reduce using rule 18 (var_declaration)


State 76

   36 formal_parameter: '(' . parameter_list ')'

    error  shift, and go to state 11
    VAR    shift, and go to state 103
    ID     shift, and go to state 12

    idlist           go to state 104
    parameter_list   go to state 105
    parameter        go to state 106
    var_parameter    go to state 107
    value_parameter  go to state 108


State 77

   34 subprogram_head: PROCEDURE ID formal_parameter .

    $default  reduce using rule 34 (subprogram_head)


State 78

   35 subprogram_head: FUNCTION ID formal_parameter . ':' basic_type

    ':'  shift, and go to state 109


State 79

   87 factor: NOT . factor

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable  go to state 84
    factor    go to state 110


State 80

   65 variable: ID . id_varpart
   85 factor: ID . '(' expression_list ')'

    '('  shift, and go to state 111
    '['  shift, and go to state 93

    $default  reduce using rule 67 (id_varpart)

    id_varpart  go to state 94


State 81

   88 factor: UMINUS . factor

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable  go to state 84
    factor    go to state 112


State 82

   83 factor: NUM .

    $default  reduce using rule 83 (factor)


State 83

   86 factor: '(' . expression_list ')'

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression_list    go to state 113
    expression         go to state 114
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 84

   84 factor: variable .

    $default  reduce using rule 84 (factor)


State 85

   57 statement: IF expression . THEN $@5 statement $@6 else_part

    THEN  shift, and go to state 115


State 86

   75 expression: simple_expression . RELOP simple_expression
   76           | simple_expression .  [END, THEN, ELSE, TO, DO, ';', ')', ',', ']']
   77 simple_expression: simple_expression . ADDOP term
   78                  | simple_expression . PLUS term
   79                  | simple_expression . UMINUS term

    PLUS    shift, and go to state 116
    ADDOP   shift, and go to state 117
    RELOP   shift, and go to state 118
    UMINUS  shift, and go to state 119

    $default  reduce using rule 76 (expression)


State 87

   80 simple_expression: term .  [PLUS, ADDOP, END, THEN, ELSE, TO, DO, RELOP, UMINUS, ';', ')', ',', ']']
   81 term: term . MULOP factor

    MULOP  shift, and go to state 120

    $default  reduce using rule 80 (simple_expression)


State 88

   82 term: factor .

    $default  reduce using rule 82 (term)


State 89

   59 statement: FOR ID . ASSIGNOP expression TO expression DO $@7 statement

    ASSIGNOP  shift, and go to state 121


State 90

   60 statement: READ '(' . variable_list ')'

    ID  shift, and go to state 122

    variable_list  go to state 123
    variable       go to state 124


State 91

   61 statement: WRITE '(' . expression_list ')'

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression_list    go to state 125
    expression         go to state 114
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 92

   69 procedure_call: ID '(' . expression_list ')'

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression_list    go to state 126
    expression         go to state 114
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 93

   66 id_varpart: '[' . expression_list ']'

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression_list    go to state 127
    expression         go to state 114
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 94

   65 variable: ID id_varpart .

    $default  reduce using rule 65 (variable)


State 95

   46 compound_statement: _BEGIN statement_list END .

    $default  reduce using rule 46 (compound_statement)


State 96

   48 statement_list: statement_list ';' . $@2 statement

    $default  reduce using rule 47 ($@2)

    $@2  go to state 128


State 97

   54 statement: $@4 compound_statement .

    $default  reduce using rule 54 (statement)


State 98

   51 statement: variable ASSIGNOP . expression $@3

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression         go to state 129
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 99

   45 subprogram_body: const_declarations . var_declarations $@1 compound_statement

    VAR  shift, and go to state 17

    $default  reduce using rule 17 (var_declarations)

    var_declarations  go to state 130


State 100

   33 subprogram: subprogram_head ';' subprogram_body .

    $default  reduce using rule 33 (subprogram)


State 101

   30 period: DIGITSDOTDOTDIGITS .

    $default  reduce using rule 30 (period)


State 102

   23 type: ARRAY '[' period . ']' OF basic_type
   29 period: period . ',' DIGITSDOTDOTDIGITS

    ','  shift, and go to state 131
    ']'  shift, and go to state 132


State 103

   42 var_parameter: VAR . value_parameter

    error  shift, and go to state 11
    ID     shift, and go to state 12

    idlist           go to state 104
    value_parameter  go to state 133


State 104

    5 idlist: idlist . ',' ID
   43 value_parameter: idlist . ':' basic_type

    ','  shift, and go to state 20
    ':'  shift, and go to state 134


State 105

   36 formal_parameter: '(' parameter_list . ')'
   38 parameter_list: parameter_list . ';' parameter

    ';'  shift, and go to state 135
    ')'  shift, and go to state 136


State 106

   39 parameter_list: parameter .

    $default  reduce using rule 39 (parameter_list)


State 107

   40 parameter: var_parameter .

    $default  reduce using rule 40 (parameter)


State 108

   41 parameter: value_parameter .

    $default  reduce using rule 41 (parameter)


State 109

   35 subprogram_head: FUNCTION ID formal_parameter ':' . basic_type

    error    shift, and go to state 48
    INTEGER  shift, and go to state 50
    REAL     shift, and go to state 51
    BOOLEAN  shift, and go to state 52
    CHAR     shift, and go to state 53

    basic_type  go to state 137


State 110

   87 factor: NOT factor .

    $default  reduce using rule 87 (factor)


State 111

   85 factor: ID '(' . expression_list ')'

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression_list    go to state 138
    expression         go to state 114
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 112

   88 factor: UMINUS factor .

    $default  reduce using rule 88 (factor)


State 113

   73 expression_list: expression_list . ',' expression
   86 factor: '(' expression_list . ')'

    ')'  shift, and go to state 139
    ','  shift, and go to state 140


State 114

   74 expression_list: expression .

    $default  reduce using rule 74 (expression_list)


State 115

   57 statement: IF expression THEN . $@5 statement $@6 else_part

    $default  reduce using rule 55 ($@5)

    $@5  go to state 141


State 116

   78 simple_expression: simple_expression PLUS . term

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable  go to state 84
    term      go to state 142
    factor    go to state 88


State 117

   77 simple_expression: simple_expression ADDOP . term

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable  go to state 84
    term      go to state 143
    factor    go to state 88


State 118

   75 expression: simple_expression RELOP . simple_expression

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    simple_expression  go to state 144
    term               go to state 87
    factor             go to state 88


State 119

   79 simple_expression: simple_expression UMINUS . term

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable  go to state 84
    term      go to state 145
    factor    go to state 88


State 120

   81 term: term MULOP . factor

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable  go to state 84
    factor    go to state 146


State 121

   59 statement: FOR ID ASSIGNOP . expression TO expression DO $@7 statement

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression         go to state 147
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 122

   65 variable: ID . id_varpart

    '['  shift, and go to state 93

    $default  reduce using rule 67 (id_varpart)

    id_varpart  go to state 94


State 123

   60 statement: READ '(' variable_list . ')'
   63 variable_list: variable_list . ',' variable

    ')'  shift, and go to state 148
    ','  shift, and go to state 149


State 124

   64 variable_list: variable .

    $default  reduce using rule 64 (variable_list)


State 125

   61 statement: WRITE '(' expression_list . ')'
   73 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 150
    ','  shift, and go to state 140


State 126

   69 procedure_call: ID '(' expression_list . ')'
   73 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 151
    ','  shift, and go to state 140


State 127

   66 id_varpart: '[' expression_list . ']'
   73 expression_list: expression_list . ',' expression

    ','  shift, and go to state 140
    ']'  shift, and go to state 152


State 128

   48 statement_list: statement_list ';' $@2 . statement

    IF     shift, and go to state 59
    FOR    shift, and go to state 60
    READ   shift, and go to state 61
    WRITE  shift, and go to state 62
    ID     shift, and go to state 63

    _BEGIN    reduce using rule 53 ($@4)
    $default  reduce using rule 62 (statement)

    statement       go to state 153
    $@4             go to state 66
    variable        go to state 67
    procedure_call  go to state 68


State 129

   51 statement: variable ASSIGNOP expression . $@3

    $default  reduce using rule 50 ($@3)

    $@3  go to state 154


State 130

   45 subprogram_body: const_declarations var_declarations . $@1 compound_statement

    $default  reduce using rule 44 ($@1)

    $@1  go to state 155


State 131

   29 period: period ',' . DIGITSDOTDOTDIGITS

    DIGITSDOTDOTDIGITS  shift, and go to state 156


State 132

   23 type: ARRAY '[' period ']' . OF basic_type

    OF  shift, and go to state 157


State 133

   42 var_parameter: VAR value_parameter .

    $default  reduce using rule 42 (var_parameter)


State 134

   43 value_parameter: idlist ':' . basic_type

    error    shift, and go to state 48
    INTEGER  shift, and go to state 50
    REAL     shift, and go to state 51
    BOOLEAN  shift, and go to state 52
    CHAR     shift, and go to state 53

    basic_type  go to state 158


State 135

   38 parameter_list: parameter_list ';' . parameter

    error  shift, and go to state 11
    VAR    shift, and go to state 103
    ID     shift, and go to state 12

    idlist           go to state 104
    parameter        go to state 159
    var_parameter    go to state 107
    value_parameter  go to state 108


State 136

   36 formal_parameter: '(' parameter_list ')' .

    $default  reduce using rule 36 (formal_parameter)


State 137

   35 subprogram_head: FUNCTION ID formal_parameter ':' basic_type .

    $default  reduce using rule 35 (subprogram_head)


State 138

   73 expression_list: expression_list . ',' expression
   85 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 160
    ','  shift, and go to state 140


State 139

   86 factor: '(' expression_list ')' .

    $default  reduce using rule 86 (factor)


State 140

   73 expression_list: expression_list ',' . expression

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression         go to state 161
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 141

   57 statement: IF expression THEN $@5 . statement $@6 else_part

    IF     shift, and go to state 59
    FOR    shift, and go to state 60
    READ   shift, and go to state 61
    WRITE  shift, and go to state 62
    ID     shift, and go to state 63

    _BEGIN    reduce using rule 53 ($@4)
    $default  reduce using rule 62 (statement)

    statement       go to state 162
    $@4             go to state 66
    variable        go to state 67
    procedure_call  go to state 68


State 142

   78 simple_expression: simple_expression PLUS term .  [PLUS, ADDOP, END, THEN, ELSE, TO, DO, RELOP, UMINUS, ';', ')', ',', ']']
   81 term: term . MULOP factor

    MULOP  shift, and go to state 120

    $default  reduce using rule 78 (simple_expression)


State 143

   77 simple_expression: simple_expression ADDOP term .  [PLUS, ADDOP, END, THEN, ELSE, TO, DO, RELOP, UMINUS, ';', ')', ',', ']']
   81 term: term . MULOP factor

    MULOP  shift, and go to state 120

    $default  reduce using rule 77 (simple_expression)


State 144

   75 expression: simple_expression RELOP simple_expression .  [END, THEN, ELSE, TO, DO, ';', ')', ',', ']']
   77 simple_expression: simple_expression . ADDOP term
   78                  | simple_expression . PLUS term
   79                  | simple_expression . UMINUS term

    PLUS    shift, and go to state 116
    ADDOP   shift, and go to state 117
    UMINUS  shift, and go to state 119

    $default  reduce using rule 75 (expression)


State 145

   79 simple_expression: simple_expression UMINUS term .  [PLUS, ADDOP, END, THEN, ELSE, TO, DO, RELOP, UMINUS, ';', ')', ',', ']']
   81 term: term . MULOP factor

    MULOP  shift, and go to state 120

    $default  reduce using rule 79 (simple_expression)


State 146

   81 term: term MULOP factor .

    $default  reduce using rule 81 (term)


State 147

   59 statement: FOR ID ASSIGNOP expression . TO expression DO $@7 statement

    TO  shift, and go to state 163


State 148

   60 statement: READ '(' variable_list ')' .

    $default  reduce using rule 60 (statement)


State 149

   63 variable_list: variable_list ',' . variable

    ID  shift, and go to state 122

    variable  go to state 164


State 150

   61 statement: WRITE '(' expression_list ')' .

    $default  reduce using rule 61 (statement)


State 151

   69 procedure_call: ID '(' expression_list ')' .

    $default  reduce using rule 69 (procedure_call)


State 152

   66 id_varpart: '[' expression_list ']' .

    $default  reduce using rule 66 (id_varpart)


State 153

   48 statement_list: statement_list ';' $@2 statement .

    $default  reduce using rule 48 (statement_list)


State 154

   51 statement: variable ASSIGNOP expression $@3 .

    $default  reduce using rule 51 (statement)


State 155

   45 subprogram_body: const_declarations var_declarations $@1 . compound_statement

    _BEGIN  shift, and go to state 39

    compound_statement  go to state 165


State 156

   29 period: period ',' DIGITSDOTDOTDIGITS .

    $default  reduce using rule 29 (period)


State 157

   23 type: ARRAY '[' period ']' OF . basic_type

    error    shift, and go to state 48
    INTEGER  shift, and go to state 50
    REAL     shift, and go to state 51
    BOOLEAN  shift, and go to state 52
    CHAR     shift, and go to state 53

    basic_type  go to state 166


State 158

   43 value_parameter: idlist ':' basic_type .

    $default  reduce using rule 43 (value_parameter)


State 159

   38 parameter_list: parameter_list ';' parameter .

    $default  reduce using rule 38 (parameter_list)


State 160

   85 factor: ID '(' expression_list ')' .

    $default  reduce using rule 85 (factor)


State 161

   73 expression_list: expression_list ',' expression .

    $default  reduce using rule 73 (expression_list)


State 162

   57 statement: IF expression THEN $@5 statement . $@6 else_part

    $default  reduce using rule 56 ($@6)

    $@6  go to state 167


State 163

   59 statement: FOR ID ASSIGNOP expression TO . expression DO $@7 statement

    NOT     shift, and go to state 79
    ID      shift, and go to state 80
    UMINUS  shift, and go to state 81
    NUM     shift, and go to state 82
    '('     shift, and go to state 83

    variable           go to state 84
    expression         go to state 168
    simple_expression  go to state 86
    term               go to state 87
    factor             go to state 88


State 164

   63 variable_list: variable_list ',' variable .

    $default  reduce using rule 63 (variable_list)


State 165

   45 subprogram_body: const_declarations var_declarations $@1 compound_statement .

    $default  reduce using rule 45 (subprogram_body)


State 166

   23 type: ARRAY '[' period ']' OF basic_type .

    $default  reduce using rule 23 (type)


State 167

   57 statement: IF expression THEN $@5 statement $@6 . else_part

    ELSE  shift, and go to state 169

    ELSE      [reduce using rule 72 (else_part)]
    $default  reduce using rule 72 (else_part)

    else_part  go to state 170


State 168

   59 statement: FOR ID ASSIGNOP expression TO expression . DO $@7 statement

    DO  shift, and go to state 171


State 169

   71 else_part: ELSE . $@8 statement

    $default  reduce using rule 70 ($@8)

    $@8  go to state 172


State 170

   57 statement: IF expression THEN $@5 statement $@6 else_part .

    $default  reduce using rule 57 (statement)


State 171

   59 statement: FOR ID ASSIGNOP expression TO expression DO . $@7 statement

    $default  reduce using rule 58 ($@7)

    $@7  go to state 173


State 172

   71 else_part: ELSE $@8 . statement

    IF     shift, and go to state 59
    FOR    shift, and go to state 60
    READ   shift, and go to state 61
    WRITE  shift, and go to state 62
    ID     shift, and go to state 63

    _BEGIN    reduce using rule 53 ($@4)
    $default  reduce using rule 62 (statement)

    statement       go to state 174
    $@4             go to state 66
    variable        go to state 67
    procedure_call  go to state 68


State 173

   59 statement: FOR ID ASSIGNOP expression TO expression DO $@7 . statement

    IF     shift, and go to state 59
    FOR    shift, and go to state 60
    READ   shift, and go to state 61
    WRITE  shift, and go to state 62
    ID     shift, and go to state 63

    _BEGIN    reduce using rule 53 ($@4)
    $default  reduce using rule 62 (statement)

    statement       go to state 175
    $@4             go to state 66
    variable        go to state 67
    procedure_call  go to state 68


State 174

   71 else_part: ELSE $@8 statement .

    $default  reduce using rule 71 (else_part)


State 175

   59 statement: FOR ID ASSIGNOP expression TO expression DO $@7 statement .

    $default  reduce using rule 59 (statement)
